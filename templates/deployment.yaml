{{- $fullName := include "fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "labels" . | nindent 4 }}
    version: "{{ .Chart.AppVersion }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:  
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $fullName }}
  template:
    metadata:
      labels:
        app: {{ $fullName }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
      {{- if .Values.image.tag }}
        image: {{ .Values.image.name }}:{{ .Values.image.tag }}
      {{- else if .Values.mysql.enabled }}
        image: "{{ .Values.image.name }}:lts-mysql-tomcat"
      {{- else if .Values.postgresql.enabled }}
        image: "{{ .Values.image.name }}:lts-postgres-tomcat"
      {{- else }}
        image: {{ .Values.image.name }}
      {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - /bin/bash
        - -c
        - |-
          ##
          # *Experimental* solution for custom properties. 
          # With time we are looking other alternatives to setup this custom values. 
          ##
          # Always execute "first_start" in order to get all new values keys from future versions. 
          rm -f /usr/local/xwiki/data/xwiki.cfg
          rm -f /usr/local/xwiki/data/xwiki.properties
          rm -f /usr/local/xwiki/data/hibernate.cfg.xml

          # Reuse commands/resources from default entrypoint. 
          source /usr/local/bin/docker-entrypoint.sh
          file_env 'CONTEXT_PATH' 'ROOT'
          # Setup all default actions from first start
          first_start

          # Replace all values from keys defineded on customConfigs
          {{- range $file, $values := .Values.customConfigs }}
            {{- range $key, $value := $values }}
              # TODO review/manage extensions 
              if grep -wq "{{ $key }}" /usr/local/xwiki/data/{{ $file }}; then
                echo "Key ({{ $key }}) exists on file ({{ $file }}), replacing that key line with new value."
                xwiki_replace "/usr/local/xwiki/data/{{ $file }}" "{{ $key }}" "{{ $value }}" || true
              else 
                echo "Key ({{ $key }}) don't exists on file ({{ $file }}), appending that key line with new value."
                echo '{{ $key }} = {{ $value | quote }}' >> "/usr/local/xwiki/data/{{ $file }}" || true
              fi
            {{- end }}
          {{- end }}

          /usr/local/bin/docker-entrypoint.sh xwiki 
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
        {{- if .Values.mysql.enabled }}
              name: "{{ .Release.Name }}-mysql"
              key: mysql-password
        {{- else if .Values.postgresql.enabled }}
              name: "{{ .Release.Name }}-postgresql"
              key: postgres-password
        {{- else }}
              name: {{ .Release.Name | quote }}
              key: DB_PASSWORD
        {{- end }}
        {{- if .Values.solr.enabled }}
        - name: INDEX_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ $fullName }}
              key: INDEX_HOST
        - name: INDEX_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ $fullName }}
              key: INDEX_PORT
        {{- end }}
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ $fullName }}
              key: DB_HOST
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: {{ $fullName }}
              key: DB_USER
        - name: DB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: {{ $fullName }}
              key: DB_DATABASE
        resources:
{{ toYaml .Values.resources | indent 12 }}
        volumeMounts:
        - name: xwiki-data
          mountPath: /usr/local/xwiki/data
      volumes:
      - name: xwiki-data
        persistentVolumeClaim:
          claimName: xwiki
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: xwiki
spec:
  accessModes:
    - {{ .Values.storageAccessMode | quote }}
  resources:
    requests:
      storage: {{ .Values.storage }}
    {{- if .Values.storageClass }}
    storageClassName: {{ .Values.storageClass | quote }}
    {{- end }}
